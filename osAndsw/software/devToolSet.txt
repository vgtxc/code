//lastEdit=>2023.05.30
//lastEdit=>2023.04.13

//编程解释器安装
//**************************************************************
	前提说明
		1.windows中的环境变量名"不区分大小写"
		2.一般可运行编译器工具以下可能路径:
			// {vgtHome}:解释器安装路径
			“{vgtHome}/bin”
			“{vgtHome}/cmd”
			“{vgtHome}/Scripts”
			“{vgtHome}/tools”
		3.一般解释器安装
			安装解释器,到路径{vgtHome}-->找到安装路径{vgtHome}-->在路径“{vgtHome}”下寻找可执行文件-->将“可执行文件所在的文件夹”添加到环境变量
			windows添加到“Path”
			linux添加到“/usr/bin”
		4.符号说明
			<env>:env为必须配置的环境变量
			[env]:env为可选配置的环境变量
			{env}:引用env环境变量
		5.标题说明
			“1.环境变量”:需要手动配置的环境变量;<env>必须配置;[env]一般不配置
			“2.可执行文件”:需要修改的环境变量;必须添加到“Path”环境变量
				可执行文件以“是否添加到Path中”为是否配置完好的“重要标准”
			“3.包管理”:包管理工具的操作说明,常见命令

//**************************************************************

go
	1.环境变量
		[goRoot]:安装路径，eg->C:/GO
		[goPath]:工程路径,需要自己创建,有多个用英文逗号","隔开
	2.可执行文件
		{goRoot}/bin:编译器路径
	3.包管理
		//(全局)下载到gopath中
			go get github.com/shopspring/decimal
			go install <pakage>@<ver>
		//全部安装(全局)下载到gopath中
			go mod download
		//下载到当前项目中vendor(当前项目)
			go mod vendor
		//go get/install失败 => 配置代理,换源
			// 开启go mod模块管理类似于node的 npm
			go env -w GO111MODULE=on 
			// 这个模块代理,镜像依赖,类似node,依赖阿里云的镜像的 cnpm
			go env -w GOPROXY=https://goproxy.cn,direct
		//查看golang的环境配置
			go env

java
	1.环境变量
		[java_home]:解释器的安装目录，eg->C:/jdk16
		[classPath]:指定“类对象”的搜索路径,需要自己创建
	2.可执行文件
		{java_home}/bin:编译器路径
	3.包管理
		pass

rust
	1.环境变量
		<rustup_home>:官方安装工具"rustup-init"的默认安装路径
		<cargo_home>:cargo工具链包路径
		[rust_src_path]:源码路径
	2.可执行文件
		{cargo_home}/bin:编译器路径
	3.包管理
		pass
		
python
	1.环境变量
		[python_home]:解释器的安装路径
	2.可执行文件
		{python_home}:编译器路径
		{python_home}/Scripts:脚本工具路径
	3.包管理
		//PATH(修改path环境变量) => %python_home%/Scripts => python_home下的Scripts,是包管理工具的路径
		//包管理器换源
			# 默认源
			https://pypi.org/simple
			# 清华源
			pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
			# 阿里源
			pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
			# 腾讯源
			pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple
			# 豆瓣源
			pip config set global.index-url http://pypi.douban.com/simple/

nodejs环境变量的配置:
	1.环境变量
		[nodejs_home]:编译器的安装路径
		[node_global]:全局模块所在的路径
		[node_cache]:全局模块缓存的路径
	2.可执行文件
		{nodejs_home}:编译器路径;包管理工具路径
	3.包管理
		//修改npm的全局路径:
			npm config set prefix %node_global%
			npm config set cache %node_cache%
		//npm安装全局模块,packageName:要安装的包名,-g:表示全局
			npm install <packageName> -g
		//使用srcAddr源进行安装
			npm install -g <packageName> --registry=<srcAddr>

anconda环境配置:
	1.环境变量
		[conda_home]:安装的路径
	2.可执行文件
		{conda_home}:编译器路径;包管理工具路径
		{conda_home}/condabin:其它工具路径
		{conda_home}/Scripts:其它脚本工具路径; eg: pip3
	2.包管理
		//conda包管理工具路径 => %conda_home%/Scripts
		//PATH(修改path环境变量) => 添加“%conda_home%/Scripts”